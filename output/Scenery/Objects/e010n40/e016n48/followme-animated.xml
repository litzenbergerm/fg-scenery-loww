<?xml version="1.0" encoding="UTF-8" ?>

<PropertyList>

<!-- airport scenery model for the Flightgear flight simulator.

This program is free software: you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software Foundation, 
either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
Public License for more details.

-->
<nasal>
 <load> 
     <![CDATA[
     #dx,dy,dz,speed m/s     
     var legs  = [
                  [100,     0,   1, 30/3.6],
                  [700,     0,   6, 80/3.6],
                  [50,      0,   0, 60/3.6],
                  [100,    -10,   1, 60/3.6],
                  [50,      0,   0, 60/3.6],
                  [1000,    0,   5, 80/3.6],
                  [50,      0,   0, 30/3.6],
                  [0,      -50,   0, 30/3.6],
                  [0,     -900,   0, 80/3.6],
                  [0,     -50,   0, 60/3.6],
                  [0,     -10,   0, 20/3.6],

                  
#                  [100,     0,   2, 30/3.6],
#                  [200,   200,   2, 50/3.6],
#                  [300,   -200,   2, 60/3.6],
#                  [300,   200,   2, 80/3.6],
#                  [300,   -200,   2, 80/3.6],
#                  [300,   200,   2, 80/3.6],

                 ]; 

     var duration = 0;
     var n = size(legs)-1;
     var track = [];
     var x=0;var y=0;var z=0;var angle=0;var length=0;var dir=0;
     
     foreach(var ll; legs) {
         x += ll[0];
         y += ll[1];
         z += ll[2];
         length = math.sqrt( ll[0]*ll[0]+ll[1]*ll[1] );
         dir = -math.atan2(ll[1], ll[0])*R2D;
         
         duration += length/ll[3];
         
         append(track, [x, y, z, length/ll[3], dir, 6/ll[3]]);
     }
     
     var nextmove = func (j) {
         var dt = track[j][3];
         
         if (j==0) {
             setprop("sim/scenery/followme/travel-x-m", 0);
             setprop("sim/scenery/followme/travel-y-m", 0);
             setprop("sim/scenery/followme/up-m", 0);
             setprop("sim/scenery/followme/dir-deg", 0);
         }
         
         interpolate("sim/scenery/followme/travel-x-m", track[j][0], dt);
         interpolate("sim/scenery/followme/travel-y-m", track[j][1], dt);
         interpolate("sim/scenery/followme/up-m", track[j][2], dt);
         #turn direction and turn time
         interpolate("sim/scenery/followme/dir-deg", track[j][4], track[j][5]);
         
         if (j<n) 
             settimer(func {nextmove(j+1);}, dt);          
         else    
             settimer(func {nextmove(0);}, dt+1.0);          
     };
     
     nextmove(0);
     
     ]]>
 </load>
 <unload>
 </unload>
 
</nasal>
    
<path>followme-animated.ac</path>

<animation>
    <type>translate</type>
    <object-name>Cube</object-name>
    <property>sim/scenery/followme/travel-x-m</property>
    <axis>
       <x>-1</x>
       <y>0</y>
       <z>0</z>
    </axis>    
</animation>

<animation>
    <type>translate</type>
    <object-name>Cube</object-name>
    <property>sim/scenery/followme/travel-y-m</property>
    <axis>
       <x>0</x>
       <y>1</y>
       <z>0</z>
    </axis>    
</animation>

<animation>
    <type>translate</type>
    <object-name>Cube</object-name>
    <property>sim/scenery/followme/up-m</property>
    <axis>
       <x>0</x>
       <y>0</y>
       <z>1</z>
    </axis>    
</animation>

<animation>
    <type>rotate</type>
    <object-name>Cube</object-name>
    <property>sim/scenery/followme/dir-deg</property>
    <axis>
       <x>0</x>
       <y>0</y>
       <z>1</z>
    </axis>    
</animation>

</PropertyList>
